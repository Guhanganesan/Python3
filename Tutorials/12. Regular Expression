Regular expressions (regex) are a powerful tool for pattern matching and text manipulation in Python. They allow you to search, match, and manipulate strings based on specific patterns. Python provides the `re` module to work with regular expressions.

### Basic Concepts

1. **Patterns**: Regular expressions are patterns used to match sequences of characters in strings.
2. **Metacharacters**: Special characters with specific meanings in regex patterns (e.g., `.` matches any character, `\d` matches any digit).
3. **Flags**: Options to modify the behavior of regex matching (e.g., case-insensitive matching).

### Common Regular Expression Operations

#### 1. **Matching Patterns**

- **`re.match(pattern, string)`**: Checks for a match only at the beginning of the string.
- **`re.search(pattern, string)`**: Searches for the first occurrence of the pattern anywhere in the string.

```python
import re

pattern = r'\d+'  # Matches one or more digits
text = "There are 123 apples and 456 oranges."

# Match at the beginning
match = re.match(pattern, text)
print(match)  # Output: None

# Search anywhere in the string
search = re.search(pattern, text)
print(search.group())  # Output: 123
```

#### 2. **Finding All Matches**

- **`re.findall(pattern, string)`**: Returns a list of all non-overlapping matches of the pattern in the string.
- **`re.finditer(pattern, string)`**: Returns an iterator yielding match objects for all non-overlapping matches.

```python
import re

pattern = r'\d+'
text = "There are 123 apples and 456 oranges."

# Find all matches
all_matches = re.findall(pattern, text)
print(all_matches)  # Output: ['123', '456']

# Find all matches with match objects
all_matches_iter = re.finditer(pattern, text)
for match in all_matches_iter:
    print(match.group())  # Output: 123, 456
```

#### 3. **Replacing Text**

- **`re.sub(pattern, repl, string)`**: Replaces occurrences of the pattern with a replacement string.

```python
import re

pattern = r'\d+'
text = "There are 123 apples and 456 oranges."

# Replace all digits with 'X'
replaced_text = re.sub(pattern, 'X', text)
print(replaced_text)  # Output: "There are X apples and X oranges."
```

#### 4. **Splitting Strings**

- **`re.split(pattern, string)`**: Splits the string by occurrences of the pattern.

```python
import re

pattern = r'\s+'  # Matches one or more whitespace characters
text = "This is a sample text."

# Split the text by whitespace
split_text = re.split(pattern, text)
print(split_text)  # Output: ['This', 'is', 'a', 'sample', 'text.']
```

### Commonly Used Metacharacters

- **`.`**: Matches any single character except newline.
- **`\d`**: Matches any digit (equivalent to `[0-9]`).
- **`\D`**: Matches any non-digit character.
- **`\w`**: Matches any word character (alphanumeric plus underscore).
- **`\W`**: Matches any non-word character.
- **`\s`**: Matches any whitespace character (space, tab, newline).
- **`\S`**: Matches any non-whitespace character.
- **`^`**: Anchors the pattern to the start of the string.
- **`$`**: Anchors the pattern to the end of the string.
- **`*`**: Matches 0 or more repetitions of the preceding pattern.
- **`+`**: Matches 1 or more repetitions of the preceding pattern.
- **`?`**: Matches 0 or 1 repetition of the preceding pattern.
- **`{n}`**: Matches exactly n repetitions of the preceding pattern.
- **`{n,}`**: Matches n or more repetitions of the preceding pattern.
- **`{n,m}`**: Matches between n and m repetitions of the preceding pattern.
- **`[...]`**: Matches any single character within the brackets.
- **`[^...]`**: Matches any single character not within the brackets.
- **`|`**: Matches either the pattern on the left or the pattern on the right.

### Example Patterns

- **Email Address**: `r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'`
- **Phone Number**: `r'^\+?\d{1,3}[-.\s]?\(?\d{1,4}\)?[-.\s]?\d{1,4}[-.\s]?\d{1,9}$'`
- **URL**: `r'^(https?|ftp)://[^\s/$.?#].[^\s]*$'`

### Summary

- **Regular Expressions** are used for pattern matching and text manipulation.
- **`re` Module** provides functions like `match`, `search`, `findall`, `sub`, and `split` for regex operations.
- **Metacharacters** define the syntax and structure of patterns.
- **Flags** modify regex behavior, such as making matches case-insensitive.

Regular expressions are a powerful tool for text processing, allowing for complex pattern matching and manipulation in Python. Understanding and mastering regex can significantly enhance your ability to handle and process textual data.